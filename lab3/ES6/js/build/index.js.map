{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["class Note {\n  constructor(title) {\n    this.title = title;\n    this.element = this.createElement(title);\n  }\n  \n  createElement(title){\n    let newNote = document.createElement('div');\n    newNote.title = title;\n    // Adds a css class card to the HTML element div\n    newNote.classList.add('card');\n\n    let p = document.createElement('p');\n    p.innerHTML = title;\n    newNote.appendChild(p);\n    \n    // Create new element a in the newly created div\n    let a = document.createElement('a');\n    a.innerHTML = \"Remove\";\n    a.href = \"#\";\n    // Adds a css class card-remove to the HTML element a\n    newNote.classList.add('card-remove');\n    newNote.appendChild(a);\n    // Remove note\n    a.addEventListener('click', this.remove.bind(newNote));\n\n    let notes = document.querySelector('.notes');\n    notes.appendChild(newNote);\n\n    return newNote;\n  }\n  \n  add(){\n    // HINT🤩\n    // this function should append the note to the screen somehow\n    document.querySelector(\".notes\").appendChild(this.element);\n    console.log(\"add new card\");\n  }\n  \n  saveToStorage(text){\n    // HINT🤩\n    // localStorage only supports strings, not arrays\n    // if you want to store arrays, look at JSON.parse and JSON.stringify\n\n    // Adds new item to end of array, and returns new length\n    console.log(saveNotes);\n    saveNotes.appendChild(text);\n\n    // storage.setItem(keyName, keyvalue);\n    /* when passed a key name and value, setItem() will\n    add that key to the given storage object, or update\n    that key's value if it already exists.*/\n    // JSON.stringify converts a js-object/value to a JSON string.\n    localStorage.setItem('notes', JSON.stringify(saveNotes));\n    console.log(\"saved\");\n  }\n  \n  remove(){\n    // HINT🤩 the meaning of 'this' was set by bind() in the createElement function\n    // in this function, 'this' will refer to the current note element\n\n    this.remove();\n  } \n}\n\nclass App {\n  constructor() {\n    console.log(\"👊🏼 The Constructor!\");\n    \n    // this.loadNotesFromStorage();\n    // clicking button\n    this.btnAdd = document.querySelector(\"#btnAddNote\");\n    \n    // pressing enter\n    this.enterButton = document.querySelector(\"#txtAddNote\");\n    let enter = this.btnAdd;\n    this.enterButton.addEventListener(\"keyup\", function (event) {\n      event.preventDefault();\n\n      if (event.keyCode === 13) {\n        enter.click();\n        console.lof(\"confirmed\");\n      }\n    });\n\n\n    this.btnAdd.addEventListener(\"click\", this.createNote.bind(this));\n  }\n  \n  loadNotesFromStorage() {\n    // HINT🤩\n    // load all notes from storage here and add them to the screen\n    // something like note.add() in a loop would be nice\n\n    let loadNotes = JSON.parse(localStorage.getItem('notes'));\n\n    if (loadNotes !== null) {\n      loadNotes.forEach( value => {\n        let note = new Note(value);\n        note.add();\n      });\n    }\n  }\n   \n  createNote(e){\n    // this function should create a new note by using the Note() class\n\n    let value = document.querySelector(\"#txtAddNote\").value;\n    let note = new Note(value);\n    note.saveToStorage(value);\n    note.add();\n    this.reset();\n    \n  }\n  \n  reset(){\n    // this function should reset the form\n        document.querySelector(\"#txtAddNote\").reset();\n\n  }\n  \n}\n\n// Create array to save notes in\nlet saveNotes = [];\n// JSON = exchange data to/from a web server\n// JSON.parse => Parses data and let's it become a JS-object\n// Parses the item you took from localStorage\nsaveNotes = JSON.parse(localStorage.getItem('notes'));\n\nlet app = new App();"]}