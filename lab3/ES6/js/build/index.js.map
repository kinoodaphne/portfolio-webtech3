{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;IAAM,I;AACJ,gBAAY,KAAZ,EAAmB;AAAA;;AACjB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,OAAL,GAAe,KAAK,aAAL,CAAmB,KAAnB,CAAf;AACD;;;;kCAEa,K,EAAM;AAClB,UAAI,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,cAAQ,KAAR,GAAgB,KAAhB;AACA;AACA;AACA,cAAQ,SAAR,CAAkB,GAAlB,CAAsB,MAAtB;;AAEA;AACA,UAAI,IAAI,SAAS,aAAT,CAAuB,GAAvB,CAAR;AACA,QAAE,SAAF,GAAc,QAAd;AACA,QAAE,IAAF,GAAS,GAAT;AACA;AACA,cAAQ,SAAR,CAAkB,GAAlB,CAAsB,aAAtB;AACA,cAAQ,WAAR,CAAoB,CAApB;AACA;AACA,QAAE,gBAAF,CAAmB,OAAnB,EAA4B,KAAK,MAAL,CAAY,IAAZ,CAAiB,OAAjB,CAA5B;;AAEA,UAAI,IAAI,SAAS,aAAT,CAAuB,GAAvB,CAAR;AACA,QAAE,SAAF,GAAc,KAAd;AACA,cAAQ,WAAR,CAAoB,CAApB;;AAEA,aAAO,OAAP;AACD;;;0BAEI;AACH;AACA;AACA,eAAS,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,CAA6C,KAAK,OAAlD;AACD;;;oCAEc;AACb;AACA;AACA;AACD;;;6BAEO;AACN;AACA;;AAEA,WAAK,MAAL;AACD;;;;;;IAGG,G;AACJ,iBAAc;AAAA;;AACZ,YAAQ,GAAR,CAAY,uBAAZ;;AAEA;AACA;AACA;AACA,SAAK,MAAL,GAAc,SAAS,aAAT,CAAuB,aAAvB,CAAd;AACA,SAAK,MAAL,CAAY,gBAAZ,CAA6B,OAA7B,EAAsC,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAtC;AACA;AACD;;;;2CAEsB;AACrB;AACA;AACA;AACD;;;+BAEU,C,EAAE;AACX;;AAEA;AACA,UAAI,OAAO,SAAS,aAAT,CAAuB,aAAvB,EAAsC,KAAjD;AACA,UAAI,OAAO,IAAI,IAAJ,CAAS,IAAT,CAAX;AACA,WAAK,GAAL;AACA;AACA,WAAK,KAAL;AAED;;;4BAEM;AACL;AACA,eAAS,aAAT,CAAuB,aAAvB,EAAsC,KAAtC;AACD;;;;;;AAIH,IAAI,MAAM,IAAI,GAAJ,EAAV","file":"index.js","sourcesContent":["class Note {\n  constructor(title) {\n    this.title = title;\n    this.element = this.createElement(title);\n  }\n  \n  createElement(title){\n    let newNote = document.createElement('div');\n    newNote.title = title;\n    // This property is useful to add, remove and toggle CSS classes on an element.\n    // Adds a css class card to the HTML element div\n    newNote.classList.add('card');\n\n    // Create new element a in the newly created div\n    let a = document.createElement('a');\n    a.innerHTML = \"Remove\";\n    a.href = \"#\";\n    // Adds a css class card-remove to the HTML element a\n    newNote.classList.add('card-remove');\n    newNote.appendChild(a);\n    // Remove note\n    a.addEventListener('click', this.remove.bind(newNote));\n\n    let p = document.createElement('p');\n    p.innerHTML = title;\n    newNote.appendChild(p);\n    \n    return newNote;\n  }\n  \n  add(){\n    // HINTü§©\n    // this function should append the note to the screen somehow\n    document.querySelector(\".notes\").appendChild(this.element);\n  }\n  \n  saveToStorage(){\n    // HINTü§©\n    // localStorage only supports strings, not arrays\n    // if you want to store arrays, look at JSON.parse and JSON.stringify\n  }\n  \n  remove(){\n    // HINTü§© the meaning of 'this' was set by bind() in the createElement function\n    // in this function, 'this' will refer to the current note element\n\n    this.remove();\n  } \n}\n\nclass App {\n  constructor() {\n    console.log(\"üëäüèº The Constructor!\");\n  \n    // HINTü§©\n    // clicking the button should work\n    // pressing the enter key should also work\n    this.btnAdd = document.querySelector(\"#btnAddNote\");\n    this.btnAdd.addEventListener(\"click\", this.createNote.bind(this));\n    // this.loadNotesFromStorage();\n  }\n  \n  loadNotesFromStorage() {\n    // HINTü§©\n    // load all notes from storage here and add them to the screen\n    // something like note.add() in a loop would be nice\n  }\n   \n  createNote(e){\n    // this function should create a new note by using the Note() class\n    \n    // HINTü§©\n    let text = document.querySelector(\"#txtAddNote\").value;\n    let note = new Note(text);\n    Note.add();\n    // note.saveToStorage();\n    this.reset();\n    \n  }\n  \n  reset(){\n    // this function should reset the form\n    document.querySelector(\"#txtAddNote\").reset();\n  }\n  \n}\n\nlet app = new App();"]}